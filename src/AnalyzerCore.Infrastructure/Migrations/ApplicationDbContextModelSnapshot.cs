// <auto-generated />
using System;
using AnalyzerCore.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnalyzerCore.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("AnalyzerCore.Domain.Entities.Pool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Factory")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Reserve0")
                        .HasPrecision(36, 18)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Reserve1")
                        .HasPrecision(36, 18)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Token0Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Token1Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Token0Id");

                    b.HasIndex("Token1Id");

                    b.HasIndex("Address", "Factory")
                        .IsUnique();

                    b.ToTable("Pools");
                });

            modelBuilder.Entity("AnalyzerCore.Domain.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChainId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Decimals")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Address", "ChainId")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("AnalyzerCore.Domain.Entities.Pool", b =>
                {
                    b.HasOne("AnalyzerCore.Domain.Entities.Token", "Token0")
                        .WithMany()
                        .HasForeignKey("Token0Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnalyzerCore.Domain.Entities.Token", "Token1")
                        .WithMany()
                        .HasForeignKey("Token1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Token0");

                    b.Navigation("Token1");
                });
#pragma warning restore 612, 618
        }
    }
}
